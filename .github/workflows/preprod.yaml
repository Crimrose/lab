name: Deploy preprod

on:
  # release:
  #   types: [prereleased]
  push:
    branches:
      - main

jobs:
  deploy:
    environment: preprod
    name: Deploy to Remote Server for Prerelease
    runs-on: ubuntu-latest

    steps:
      - uses: 'actions/checkout@v4'

      - name: Set up SSH key
        run: |
          # Create .ssh folder
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/KienTran.pem
          chmod 600 ~/.ssh/KienTran.pem

      - name: Get Release Tag
        # This step extracts the release tag (e.g. v1.2.3-rc) from the GitHub event payload
        id: get_tag
        run: |
          # GITHUB_REF may look like refs/tags/v1.2.3
          TAG_NAME="${GITHUB_REF##*/}"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: "Install Ansible"
        uses: alex-oleshkevich/setup-ansible@master 
        with:
          version: "11.1.0"

      - name: "Print Ansible version"
        run: ansible-playbook --version

      # - name: Install Ansible
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y ansible

      - name: Deploy playbook
        run: |
          export BRANCH=${{ steps.get_tag.outputs.tag_name }}
          cd ansible-playbooks
          ansible-playbook playbook.yml -i inventory.ini --private-key ~/.ssh/KienTran.pem --limit staging --tag=deploy
          URL="http://127.0.0.1"  # Replace with your actual URL
          RETRIES=3               # Number of retry attempts
          TIMEOUT=5               # Optional: time to wait for each retry in seconds

          # Execute curl with retry logic
          HTTP_STATUS=$(curl --retry "$RETRIES" --retry-delay 2 --max-time "$TIMEOUT" -s -o /dev/null -w "%{http_code}" "$URL")

          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "Error: $URL did not return HTTP 200 after $RETRIES attempts. Status: $HTTP_STATUS"
            exit 1  # Exit with failure
          else
            echo "Success: $URL is up and returned HTTP 200."
            exit 0  # Exit with success
          fi

      # - name: SSH to Remote VM and Deploy
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.REMOTE_HOST }}             # e.g. '123.45.67.89'
      #     username: ${{ secrets.REMOTE_USER }}         # e.g. 'ubuntu'
      #     key: ${{ secrets.SSH_PRIVATE_KEY }}           # Your private key stored in GitHub Secrets
      #     port: 22                                     # Adjust if needed
      #     script: |
      #       echo "Deploying prerelease: ${{ steps.get_tag.outputs.tag_name }}"
            